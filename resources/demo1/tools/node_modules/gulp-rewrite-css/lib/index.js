// Generated by CoffeeScript 2.2.4
(function() {
  'use strict';
  var BufferStreams, IMPORT_REGEX, PLUGIN_NAME, PluginError, URL_REGEX, adaptPath, cleanMatch, es, green, isRelativeToBase, isRelativeUrl, log, magenta, path, url;

  es = require('event-stream');

  BufferStreams = require('bufferstreams');

  magenta = require('ansi-magenta');

  green = require('ansi-green');

  PluginError = require('plugin-error');

  log = require('fancy-log');

  path = require('path');

  url = require('url');

  PLUGIN_NAME = 'rewrite-css';

  URL_REGEX = /url\s*\(\s*(?!["']?data:)(.+?)\)(?=\s+(?!\))|;|}|,|!)/g; // Arbitrary white-spaces // We want to replace all the matches
  // An opening bracket
  // Arbitrary white-spaces
  // explicitly don't match data-urls
  // anything up to first closing bracket that is not followed by other closing brackets

  IMPORT_REGEX = /@import\s*(["'])\s*([^'"]+)\1/g; // Arbitrary white-spaces // We want to replace all the matches
  // the path must be quoted
  // Arbitrary white-spaces
  // Anything but a closing quote
  // The right closing quote

  cleanMatch = function(url) {
    var firstChar;
    url = url.trim();
    firstChar = url.substr(0, 1);
    if (firstChar === (url.substr(-1)) && (firstChar === '"' || firstChar === "'")) {
      url = url.substr(1, url.length - 2);
    }
    return url;
  };

  isRelativeUrl = function(u) {
    var parts;
    parts = url.parse(u, false, true);
    return !parts.protocol && !parts.host;
  };

  isRelativeToBase = function(u) {
    return '/' === u.substr(0, 1);
  };

  adaptPath = function(ctx) {
    return path.join(path.relative(ctx.destinationDir, ctx.sourceDir), ctx.targetFile);
  };

  module.exports = function(opt) {
    var bufferReplace, logRewrite, mungePath, rewriteUrls, streamReplace;
    if (opt == null) {
      opt = {};
    }
    if (opt.debug == null) {
      opt.debug = false;
    }
    if (opt.adaptPath == null) {
      opt.adaptPath = adaptPath;
    }
    if (typeof opt.adaptPath !== 'function') {
      throw new PluginError(PLUGIN_NAME, 'adaptPath method is missing');
    }
    if (!opt.destination) {
      throw new PluginError(PLUGIN_NAME, 'destination directory is missing');
    }
    mungePath = function(match, sourceFilePath, file) {
      var destinationDir, sourceDir, targetUrl;
      if ((isRelativeUrl(file)) && !(isRelativeToBase(file))) {
        destinationDir = opt.destination;
        sourceDir = path.dirname(sourceFilePath);
        targetUrl = opt.adaptPath({
          sourceDir: sourceDir,
          sourceFile: sourceFilePath,
          destinationDir: destinationDir,
          targetFile: file
        });
        if (typeof targetUrl === 'string') {
          if (path.sep === '\\') {
            // fix for windows paths
            targetUrl = targetUrl.replace(/\\/g, '/');
          }
          return targetUrl.replace("'", "\\'");
        }
      } else if (opt.debug) {
        log(magenta(PLUGIN_NAME), 'not rewriting absolute path for', magenta(match), 'in', magenta(sourceFilePath));
      }
    };
    logRewrite = function(match, sourceFilePath, destinationFilePath) {
      if (opt.debug) {
        return log(magenta(PLUGIN_NAME), 'rewriting path for', magenta(match), 'in', magenta(sourceFilePath), 'to', green(destinationFilePath));
      }
    };
    rewriteUrls = function(sourceFilePath, data) {
      var replaceCallback;
      replaceCallback = function(match, file, prefix) {
        var newPath, ret;
        file = cleanMatch(file);
        newPath = mungePath(match, sourceFilePath, file);
        if (!newPath) {
          return match;
        }
        ret = `${prefix}url("${newPath.replace('"', '\\"')}")`;
        logRewrite(match, sourceFilePath, ret);
        return ret;
      };
      return data.replace(URL_REGEX, function(match, file) {
        return replaceCallback(match, file, '');
      }).replace(IMPORT_REGEX, function(match, _, file) {
        return replaceCallback(match, file, '@import ');
      });
    };
    bufferReplace = function(file, data) {
      return rewriteUrls(file.path, data);
    };
    streamReplace = function(file) {
      return function(err, buf, cb) {
        if (err) {
          cb(PluginError(PLUGIN_NAME, err));
        }
        // Use the buffered content
        buf = Buffer(bufferReplace(file, String(buf)));
        // Bring it back to streams
        cb(null, buf);
      };
    };
    return es.map(function(file, callback) {
      var newContents, newFile, replacementFn;
      if (file.isNull()) {
        callback(null, file);
        return;
      }
      if (file.isStream()) {
        replacementFn = streamReplace(opt, file);
        file.contents = file.contents.pipe(new BufferStreams(streamReplace(file)));
        callback(null, file);
        return;
      }
      if (file.isBuffer()) {
        newFile = file.clone();
        newContents = bufferReplace(file, String(newFile.contents));
        newFile.contents = new Buffer(newContents);
        callback(null, newFile);
      }
    });
  };

  module.exports.adaptPath = adaptPath;

}).call(this);
