'use strict';

exports.__esModule = true;
exports.fixture = fixture;
exports.bundle = bundle;
exports.filePath = filePath;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _memoryFs = require('memory-fs');

var _memoryFs2 = _interopRequireDefault(_memoryFs);

var _src = require('../src');

var _src2 = _interopRequireDefault(_src);

var _miniCssExtractPlugin = require('mini-css-extract-plugin');

var _miniCssExtractPlugin2 = _interopRequireDefault(_miniCssExtractPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var workingFolder = typeof wallaby !== 'undefined' ? _path2.default.join(wallaby.localProjectDir, 'test') : __dirname; /* global wallaby */
function fixture(fileName) {
  return _path2.default.join(workingFolder, 'fixtures', fileName);
}

function bundle(options) {
  var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
    return x;
  };

  return new Promise(function (resolve, reject) {
    var compiler = (0, _webpack2.default)(modifier({
      entry: {
        bundle: fixture('index.js')
      },
      output: {
        filename: '[name].js'
      },
      resolveLoader: {
        modules: [_path2.default.resolve(workingFolder, '..', 'node_modules')]
      },
      module: {
        rules: [{
          test: /\.css$/,
          use: [{
            loader: _miniCssExtractPlugin2.default.loader
          }, 'css-loader']
        }]
      },
      plugins: [new _miniCssExtractPlugin2.default({
        filename: '[name].css'
      }), new _src2.default(options)]
    }));

    var memoryFileSystem = new _memoryFs2.default();
    compiler.outputFileSystem = memoryFileSystem;
    compiler.run(function (err, stats) {
      if (err) {
        return reject(err);
      } else if (stats.hasErrors()) {
        return reject(new Error(stats.toString()));
      } else {
        resolve(memoryFileSystem);
      }
    });
  });
}

function filePath(name) {
  return _path2.default.join(process.cwd(), 'dist', name);
}