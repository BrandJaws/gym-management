'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rtlcss = require('rtlcss');

var _rtlcss2 = _interopRequireDefault(_rtlcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cssOnly = function cssOnly(filename) {
  return _path2.default.extname(filename) === '.css';
};

var RtlCssPlugin = function () {
  function RtlCssPlugin(options) {
    _classCallCheck(this, RtlCssPlugin);

    if (typeof options === 'string') {
      options = {
        filename: options
      };
    }
    this.options = options || {
      filename: '[name].rtl.css'
    };
  }

  RtlCssPlugin.prototype.apply = function apply(compiler) {
    var _this = this;

    compiler.hooks.emit.tapAsync('RtlCssPlugin', function (compilation, callback) {
      // Explore each chunk (build output):
      compilation.chunks.forEach(function (chunk) {
        // Explore each asset filename generated by the chunk:
        chunk.files.filter(cssOnly).forEach(function (filename) {
          // Get the asset source for each file generated by the chunk:
          var src = compilation.assets[filename].source();
          var dst = _rtlcss2.default.process(src);
          var dstFileName = compilation.getPath(_this.options.filename, {
            chunk: chunk
          });

          compilation.assets[dstFileName] = {
            source: function source() {
              return dst;
            },
            size: function size() {
              return dst.length;
            }
          };
          chunk.files.push(dstFileName);
        });
      });

      callback();
    });
  };

  return RtlCssPlugin;
}();

module.exports = RtlCssPlugin;